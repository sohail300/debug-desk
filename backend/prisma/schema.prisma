// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("ACCELERATE_URL")
  directUrl = env("DATABASE_URL")
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum Status {
  OPEN
  IN_PROGRESS
  DOUBT
  RESOLVED
  CLOSED
}

enum Role {
  OWNER
  ADMIN
}

enum NotificationType {
  MENTION
  NEW_ISSUE
  CLOSED_ISSUE
}

enum ProjectRoleEnum {
  ADMIN
  DEVELOPER
  TESTER
}

model Organization {
  id        String               @id @default(uuid())
  name      String               @unique
  createdAt DateTime             @default(now())
  members   OrganizationMember[]
  projects  Project[]
}

model User {
  id                  String               @id @default(uuid())
  email               String               @unique
  passwordHash        String
  name                String
  username            String               @unique
  imageUrl            String?
  is_active           Boolean              @default(true)
  createdAt           DateTime             @default(now())
  organizationMembers OrganizationMember[]
  projectRoles        ProjectRole[]
  teamMemberships     TeamMember[]
  issuesAssigned      Issue[]              @relation("IssueAssignee")
  issuesCreated       Issue[]              @relation("IssueCreator")
  comments            Comment[]
  notifications       Notification[]
  attachments         Attachment[]
}

model OrganizationMember {
  id             String       @id @default(uuid())
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  role           Role
  createdAt      DateTime     @default(now())

  @@unique([userId, organizationId])
}

model Project {
  id             String        @id @default(uuid())
  name           String
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  createdAt      DateTime      @default(now())
  archived       Boolean       @default(false)
  projectRoles   ProjectRole[]
  teams          Team[]
  issues         Issue[]
}

model ProjectRole {
  id        String          @id @default(uuid())
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  project   Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  role      ProjectRoleEnum
  createdAt DateTime        @default(now())

  @@unique([userId, projectId])
}

model Team {
  id        String       @id @default(uuid())
  name      String
  project   Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  createdAt DateTime     @default(now())
  members   TeamMember[]
  Issue     Issue[]
}

model TeamMember {
  id        String   @id @default(uuid())
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())

  @@unique([teamId, userId])
}

model Issue {
  id           String         @id @default(uuid())
  title        String
  description  String?
  priority     Priority
  status       Status
  location     String?
  assignedTo   User?          @relation("IssueAssignee", fields: [assignedToId], references: [id], onDelete: SetNull)
  assignedToId String?
  team         Team?          @relation(fields: [teamId], references: [id], onDelete: SetNull)
  teamId       String?
  project      Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId    String
  createdBy    User           @relation("IssueCreator", fields: [createdById], references: [id], onDelete: Cascade)
  createdById  String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  comments     Comment[]
  attachments  Attachment[]
  Notification Notification[]
}

model Comment {
  id        String   @id @default(uuid())
  issue     Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)
  issueId   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  content   String
  createdAt DateTime @default(now())
}

model Notification {
  id        String           @id @default(uuid())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  issue     Issue            @relation(fields: [issueId], references: [id], onDelete: Cascade)
  issueId   String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
}

model Attachment {
  id        String   @id @default(uuid())
  issue     Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)
  issueId   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  fileUrl   String
  createdAt DateTime @default(now())
}
